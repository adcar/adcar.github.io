{"version":3,"sources":["TownButton.tsx","api.ts","routes/Towns.tsx","routes/Home.js","routes/Town.tsx","routes/Register.tsx","routes/Login.tsx","App.tsx","serviceWorker.ts","index.tsx","static/env.svg"],"names":["ListItemBtn","props","ListItem","button","component","Link","TownButton","town","isVisited","username","to","style","backgroundColor","deepPurple","color","marginTop","marginBottom","ListItemText","primary","ENDPOINT","FETCH_POST","method","headers","Towns","useState","towns","setTowns","useParams","isAuthed","localStorage","getItem","console","log","useAsyncEffect","a","fetch","res","json","Container","Typography","variant","maxWidth","map","index","key","name","useStyles","makeStyles","theme","container","spacing","art","cta","Home","classes","className","Grid","direction","justify","alignItems","item","md","Button","disableElevation","marginLeft","alt","src","envSvg","Town","visited","visit","summary","setSummary","summaryText","setSummaryText","Summary","Chip","label","onClick","status","Paper","padding","onSubmit","e","preventDefault","body","JSON","stringify","display","flexDirection","TextField","fullWidth","multiline","rowsMax","placeholder","value","onChange","target","type","paper","text","sleep","ms","Promise","resolve","setTimeout","Register","history","useHistory","passErr","setPassErr","snackOpen","setSnackOpen","snackMsg","setSnackMsg","setUsername","password","setPassword","passwordConfirm","setPasswordConfirm","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","message","gutterBottom","setItem","push","error","helperText","Login","onLogin","required","App","isLoggedIn","setIsLoggedIn","AppBar","position","Toolbar","flex","textDecoration","marginRight","window","location","href","removeItem","path","Boolean","hostname","match","responsiveFontSizes","createMuiTheme","palette","main","secondary","green","ReactDOM","render","CssBaseline","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.244126e3.chunk.js","sourcesContent":["import React from \"react\";\nimport {ListItem} from \"@material-ui/core\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport deepPurple from \"@material-ui/core/colors/deepPurple\";\nimport { Link}  from \"react-router-dom\";\n\n\nfunction ListItemBtn(props: any) {\n  return <ListItem button component={Link} {...props} />;\n}\n\nfunction TownButton({town, isVisited, username}: {town: string, isVisited: boolean, username: string }) {\n\n\n  return (\n    <ListItemBtn to={`/town/${town}/${username}/${isVisited}`} style={{\n      backgroundColor: isVisited ? deepPurple[500] : \"transparent\",\n      color: isVisited ? \"white\" : \"black\",\n      marginTop: 10,\n      marginBottom: 10\n  }}>\n    <ListItemText primary={town} />\n\n  </ListItemBtn>)\n\n}\n\n\nexport default TownButton;\n","export const ENDPOINT = \"http://73.227.239.8:5000\";\nexport const FETCH_POST = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  },\n}\n","import React, {useState} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport useAsyncEffect from \"use-async-effect\";\nimport TownButton from \"../TownButton\";\nimport {ENDPOINT} from \"../api\";\nimport {useParams} from \"react-router-dom\";\n\nfunction Towns() {\n\n  const [towns, setTowns] = useState([]);\n  const {username} = useParams();\n  const isAuthed = localStorage.getItem(\"username\") === username;\n\n  console.log(\"authed\", isAuthed);\n\n  useAsyncEffect(async () => {\n    const res = await fetch(ENDPOINT + \"/towns/\" + username);\n\n    const json = await res.json();\n\n    setTowns(json);\n  }, []);\n  return (\n    <Container>\n\n      <Typography variant={\"h2\"} component={\"h1\"} style={{marginTop: 20}}>VT Towns</Typography>\n\n      <div  style={{maxWidth: 400}}>\n        {towns.map((town: any, index) => <TownButton key={index} town={town.name} isVisited={town.isVisited} username={username}/>)}\n      </div>\n    </Container>\n  );\n}\n\nexport default Towns;\n","import envSvg from \"../static/env.svg\";\nimport React from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: theme.spacing(6),\n\n  },\n  art: {\n    maxWidth: \"100%\"\n  },\n  cta: {\n    marginTop: theme.spacing(2)\n  }\n}))\n\nfunction Home() {\n  const classes = useStyles();\n  return (\n    <Container className={classes.container}>\n    <Grid container direction=\"row\"\n  justify=\"center\"\n  alignItems=\"center\" spacing={4}>\n      <Grid item md={6}>\n        <Typography color={\"primary\"} variant={\"h2\"}>Vermontaholic</Typography>\n        <Typography>Love exploring Vermont? Hate having to manually write down every town you visited?\n          Then Vermontaholic is for you! With this web-based tool, you can keep track of which towns you visited,\n          and share your beautiful photos of Vermont!\n        </Typography>\n        <div className={classes.cta}>\n          <Button color={\"primary\"} variant={\"contained\"} disableElevation component={Link} to={\"/signup\"}>Signup</Button>\n          <Button color={\"primary\"} style={{marginLeft: 10}} component={Link} to={\"/login\"}>Login</Button>\n        </div>\n      </Grid>\n      <Grid item md={6}>\n        <img className={classes.art} alt={\"Exploring Vermont\"} src={envSvg} />\n      </Grid>\n    </Grid>\n  </Container>\n  );\n}\nexport default Home;\n","import React, {useState} from 'react';\n\nimport {useParams} from \"react-router-dom\";\nimport {Container, Typography} from \"@material-ui/core\";\nimport {ENDPOINT, FETCH_POST} from \"../api\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction Town() {\n  const {town, username, isVisited} = useParams();\n  const [visited, visit] = useState(isVisited === \"true\");\n  const [summary, setSummary] = useState(\"\");\n  const [summaryText, setSummaryText] = useState(\"\");\n  function handleClick() {\n    visit(true);\n    (async () => {\n      const res = await fetch(ENDPOINT + \"/\" + username + \"/visit/\" + town);\n      const json = await res.json();\n      if (json.status !== \"success\") {\n        //toast\n      }\n\n    })();\n  }\n  useAsyncEffect(async () => {\n    const res = await fetch(ENDPOINT + `/${town}/summary/${username}>`);\n    const json = await res.json();\n    console.log(json);\n    if (json.Summary !== \"None\") {\n      setSummary(json.Summary);\n    }\n  }, []);\n\n  useAsyncEffect(async () => {\n    const res = await fetch(ENDPOINT + `/${town}/summary/${username}>`);\n    const json = await res.json();\n    console.log(json);\n    if (json.Summary !== \"None\") {\n      setSummary(json.Summary);\n    }\n  }, []);\n\n  function handleSummarySubmit(e: any) {\n    e.preventDefault();\n    (async () => {\n      const res = await fetch(ENDPOINT + `/${town}/summary/${username}>`, {\n        ...FETCH_POST,\n        body: JSON.stringify({\n          summary: summaryText\n        })\n      });\n      const json = res.json();\n      console.log(json);\n      setSummary(summaryText);\n    })();\n  }\n  console.log(visited);\n  return (\n    <Container>\n\n      <Typography variant={\"h2\"} component={\"h1\"} style={{marginTop: 20}}>{town} {visited ? <Chip label=\"Visited\" color={\"primary\"} /> : <Button color={\"primary\"} onClick={handleClick}>Mark as Visited</Button>}</Typography>\n\n      {summary === \"\" ? <Paper style={{marginTop: 20, maxWidth: 400, padding: 20}}>\n        <form onSubmit={handleSummarySubmit} style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-start\"\n        }}>\n          <TextField\n            style={{\n              marginBottom: 20\n            }}\n            label=\"Description\"\n            fullWidth\n            multiline\n            rowsMax={4}\n            placeholder={`Write something about ${town}...`}\n            value={summaryText}\n            onChange={(e) => setSummaryText(e.target.value)}\n          />\n          <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>Submit</Button>\n        </form>\n      </Paper> : <Typography variant={\"body1\"}>{summary}</Typography>}\n    </Container>);\n}\n\nexport default Town;\n","import React, {useState} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {ENDPOINT, FETCH_POST} from \"../api\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport {useHistory} from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: theme.spacing(6),\n\n  },\n  paper: {\n    maxWidth: 300,\n    padding: theme.spacing(3)\n  },\n  text: {\n    marginBottom: 20\n  }\n}))\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nfunction Register() {\n  const history = useHistory();\n  const classes = useStyles();\n  const [passErr, setPassErr] = useState(false);\n\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [snackMsg, setSnackMsg] = useState('');\n\n\n  function handleSubmit(e: { preventDefault: () => void; }) {\n    e.preventDefault();\n    console.log(\"submitted\");\n    console.log(username);\n    console.log(password);\n    console.log(passwordConfirm);\n    if (password !== passwordConfirm) {\n      setPassErr(true);\n      return; // We don't want to continue with this function if they entered non-dupe passwords.\n    } else {\n      setPassErr(false);\n    }\n    (async () => {\n      const res = await fetch(ENDPOINT + \"/register\", {\n        ...FETCH_POST,\n        body: JSON.stringify({\n          username,\n          password\n        })\n\n      });\n\n      const json = await res.json();\n      console.log(json);\n      if (json.status === \"success\") {\n        localStorage.setItem('username', json.username);\n        setSnackOpen(true);\n        setSnackMsg(\"Successfully registered. Redirecting you to the login page...\");\n        await sleep(3000);\n        history.push(\"/login\");\n      } else {\n        setSnackOpen(true);\n        setSnackMsg(\"That username is already taken. Please try again.\");\n      }\n    })();\n\n  }\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={snackOpen}\n        autoHideDuration={6000}\n        message={snackMsg}\n\n      />\n    <Container className={classes.container}>\n      <Paper className={classes.paper}>\n        <Typography variant={\"h5\"} component={\"h1\"} color={\"primary\"} gutterBottom>Register</Typography>\n\n        <form onSubmit={handleSubmit}>\n          <TextField label=\"Username\" fullWidth className={classes.text} value={username}\n                     onChange={e => setUsername(e.target.value)} />\n          <TextField label=\"Password\" fullWidth type={\"password\"} className={classes.text} value={password}\n                     onChange={e => setPassword(e.target.value)} error={passErr} helperText={passErr ? \"Passwords don't match\" : \"\"} />\n          <TextField label=\"Confirm Password\" fullWidth type={\"password\"} style={{marginBottom: 40}}\n                     value={passwordConfirm} onChange={e => setPasswordConfirm(e.target.value)} error={passErr} helperText={passErr ? \"Passwords don't match\" : \"\"} />\n          <Button type={\"submit\"} color={\"primary\"} variant={\"contained\"}>Submit</Button>\n\n        </form>\n      </Paper>\n    </Container>\n    </>\n  );\n}\nexport default Register;\n","import React, {useState} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {ENDPOINT, FETCH_POST} from \"../api\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: theme.spacing(6),\n\n  },\n  paper: {\n    maxWidth: 300,\n    padding: theme.spacing(3)\n  },\n  text: {\n    marginBottom: 20\n  }\n}))\n\nfunction Login({onLogin}: any) {\n  const history = useHistory();\n\n  function handleSubmit(e: { preventDefault: () => void; }) {\n    e.preventDefault();\n    setSnackOpen(false);\n\n    console.log(\"submitted\");\n    console.log(username);\n    console.log(password);\n    (async () => {\n      const res = await fetch(ENDPOINT + \"/login\", {\n        ...FETCH_POST,\n        body: JSON.stringify({\n          username,\n          password\n        })\n\n      });\n\n      const json = await res.json();\n      console.log(json);\n      if (json.status === \"success\") {\n        localStorage.setItem('username', json.username);\n        setSnackOpen(true);\n        setSnackMsg(\"Successfully logged in. Redirecting...\");\n        onLogin();\n        history.push(\"/towns/\" + json.username);\n      } else {\n        setSnackOpen(true);\n        setSnackMsg(\"Username or password incorrect. Please try again.\");\n      }\n\n    })();\n  }\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [snackMsg, setSnackMsg] = useState('');\n\n\n  const classes = useStyles();\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={snackOpen}\n        autoHideDuration={6000}\n        message={snackMsg}\n\n      />\n    <Container className={classes.container}>\n      <Paper className={classes.paper}>\n        <Typography variant={\"h5\"} component={\"h1\"} color={\"primary\"} gutterBottom>Login</Typography>\n\n        <form onSubmit={handleSubmit}>\n          <TextField required label=\"Username\" fullWidth className={classes.text} value={username} onChange={e => setUsername(e.target.value)} />\n          <TextField required label=\"Password\" type={\"password\"} fullWidth style={{marginBottom: 40}} value={password} onChange={e => setPassword(e.target.value)}/>\n          <Button type={\"submit\"} color={\"primary\"} variant={\"contained\"}>Submit</Button>\n        </form>\n      </Paper>\n    </Container>\n      </>\n  );\n}\nexport default Login;\n","import React, {useState} from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, Link, Redirect\n} from \"react-router-dom\";\nimport Towns from \"./routes/Towns\";\nimport {AppBar} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Home from \"./routes/Home\";\nimport Town from \"./routes/Town\";\nimport Register from \"./routes/Register\";\nimport Login from \"./routes/Login\";\nimport {ENDPOINT} from \"./api\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function App() {\n\n  const username = localStorage.getItem(\"username\");\n  const [isLoggedIn, setIsLoggedIn] = useState(username !== null);\n  function logout() {\n    (async () => {\n      const res = await fetch(ENDPOINT + \"/logout\");\n      const json = await res.json();\n      console.log(json);\n      window.location.href = \"http://vermontaholic.tk\";\n    })();\n    localStorage.removeItem(\"username\");\n    setIsLoggedIn(localStorage.getItem(\"username\") !== null);\n  }\n  return (\n    <Router>\n      <div>\n        <AppBar position=\"static\">\n          <Container>\n          <Toolbar>\n            <Typography variant=\"h6\" style={{flex: 1, color: \"white\", textDecoration: \"none\"}} component={Link}  to={\"/\"}>\n              Vermontaholic\n            </Typography>\n            {isLoggedIn ? <><Typography style={{marginRight: 20}}>{username}</Typography><Button color=\"inherit\" onClick={logout}>Logout</Button></>: <Button color=\"inherit\" component={Link} to={\"/login\"}>Login</Button>}\n\n          </Toolbar>\n          </Container>\n\n        </AppBar>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/towns/:username\">\n            <Towns />\n          </Route>\n          <Route path=\"/town/:town/:username/:isVisited\">\n            <Town />\n          </Route>\n          <Route path=\"/signup\">\n            <Register/>\n          </Route>\n          <Route path=\"/login\">\n            <Login onLogin={() => {\n              setIsLoggedIn(localStorage.getItem(\"username\") !== null);\n            }}/>\n          </Route>\n          <Route path=\"/\">\n            {isLoggedIn ? <Redirect to={\"towns/\" + username} /> : <Home />}\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Towns from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport green from \"@material-ui/core/colors/green\";\nimport {CssBaseline} from \"@material-ui/core\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\n\nimport deepPurple from \"@material-ui/core/colors/deepPurple\";\n\nconst theme = responsiveFontSizes(createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[500],\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n}));\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n    <Towns />\n    </ThemeProvider>\n    </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/env.52d01ae8.svg\";"],"sourceRoot":""}